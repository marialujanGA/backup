<%# todo funcionando ok %>

<%# sudo /opt/bitnami/ctlscript.sh restart %>

<style>
    /* eliminar boton de cierre del pop up */
    .tf-v1-close {
        visibility: hidden;
    }   
</style>

<%# codigo de typeform  %>
<button id="button" hidden>open form</button>
<script src="//embed.typeform.com/next/embed.js"></script>
<link rel="stylesheet" href="//embed.typeform.com/next/css/popup.css" />

<%# mongo web SDK %>
<script src="https://unpkg.com/realm-web/dist/bundle.iife.js"></script>

<script>

// obtener datos de url
const currentURL = window.location.href
const pathArray = currentURL.split('/');
const idCourse = pathArray[4];
const homePath = pathArray[2];
const idQuiz = pathArray[6];




// IDs para encuestas segun lenguajes e instancia
let idiomasInitial = {
    ENG: 'h2zxp1yW',
    ESP: '',
    POR: ''
}

let idiomasExit = {
    ENG: 'uBAsoKRR',
    ESP: '',
    POR: ''
}

const options = {  'credentials' : 'same-origin',  'headers' : {    'accept' : 'application/json'  }};


const comprobarRol = () => {
    // comprobar el rol del estudiante
    fetch(`https://${homePath}/api/v1/users/self/profile`, options)
    .then((response) => {
        return response.json()
    }) 
    .then((profile) => {
        fetch(`https://${homePath}/api/v1/users/self/enrollments`, options)
        .then((response) => {
            return response.json();
        })
        .then((enrollment) => {
            if (enrollment.some(e => e.type == "StudentEnrollment" && e.course_id == idCourse)) {
                mostrarEncuestaInicial()
                console.log("estudiante")
            } else {
                console.log("no es estudiante")
                return
            }
        })        
    })

}



const mostrarEncuestaInicial = async () => {

    // iniciar Realm de MongoDB
    const app = new Realm.App({ id: "data-esbic" });
    const credentials = Realm.Credentials.anonymous();
    const user = await app.logIn(credentials);
    const mongo = app.currentUser.mongoClient("Cluster0");
    const collection = mongo.db("rails_mongo_admin_encuestas").collection("users"); 

    // obtener datos del curso
    fetch(`https://${homePath}/api/v1/courses/${idCourse}`, options)
        .then((response) => {
            return response.json();
        })
        .then((course) => {
            // obtener datos del usuario
            fetch('/api/v1/users/self/profile', options)
                .then((response) => {
                    return response.json();
                }).then((profile) => {
                    // buscar usuario en Mongo
                    const resultado = collection.findOne({canvas_id: profile.id, course_code: course.course_code, university: "XPRO", $or: [{initial_active: false}, {initial_answered: true}]});
                    console.log("Busqueda en BD hecha");
                    resultado.then((response) => {
                        if (response !== null) {
                            // si ya esta en BD
                            console.log("Ya está en BD Mongo")

                        } else {
                            let idioma = course.course_code.split('-')[1]
                            // si no está en Mongo: crear ventana pop up con encuesta. codigo en https://github.com/Typeform/embed/tree/main/packages/embed
                            const { open, close, toggle, refresh } = window.tf.createPopup(idiomasInitial[idioma], {open: 'load', autoClose:'2000', 
                            hidden: {user_name: profile.name, user_email: profile.login_id, user_canvas_id: profile.id, user_sis_id: profile.sis_user_id, course_code: course.course_code, course_name: course.name, course: course.course_code.split('-')[0], course_language: course.course_code.split('-')[1], course_period: course.course_code.split('-')[3], course_cycle: course.course_code.split('-')[2], survey_instance: 'initial', university: "XPRO"},
                            onSubmit: () => {collection.updateOne({name: profile.name, email: profile.login_id, canvas_id: profile.id, sis_id: profile.sis_user_id, university: "XPRO", course_code: course.course_code}, {$set: {initial_active: false, initial_answered: true, midterm_active: true, exit_active: true}}, {upsert: true})
                            console.log("Inserto en BD")}
                            // agregar docuemnto a BD Mongo
                            })
                        }
                    })
  
                });
        });
};



window.addEventListener('load', comprobarRol());

</script>




<% if request.path.include?('/pages/initial-survey-managing-complex-projects-and-organization') %>

    <%= render '/encuestas/prueba_encuestas_xpro' %>

<%end%>